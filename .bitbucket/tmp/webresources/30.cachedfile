;
/* module-key = 'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form', location = '/web-fragment-placeholder.config' */
WebFragments.addWebPanelDescriptor({'pluginKey':'com.nerdwin15.stash-stash-webhook-jenkins','key':'jenkinsPostReceiveHook-config-form','moduleKey':'jenkinsPostReceiveHook-config-form','completeModuleKey':'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form','name':'Simple Hook Config','params':{},'location':'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form','view':function(ctx) { return WebFragments._getValue((com.nerdwin15.stash.webhook.formContents), ctx); }});;
;
/* module-key = 'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form', location = '/static/jenkins-pr-triggerbutton.js' */
define("plugin/jenkins/pr-triggerbutton",["jquery","aui","bitbucket/internal/model/page-state"],function(d,a,b){var c=function(){return a.contextPath()+"/rest/jenkins/latest/projects/"+b.getProject().getKey()+"/repos/"+b.getRepository().getSlug()+"/triggerJenkins?branches="+b.getPullRequest().getFromRef().getDisplayId()+"&sha1="+b.getPullRequest().getFromRef().getLatestCommit()};var e='<span class="aui-icon aui-icon-wait">Wait</span>';d(".triggerJenkinsBuild").click(function(){var f=d(this);var g=f.text();f.attr("disabled","disabled").html(e+" "+g);d.ajax({url:c(),type:"POST",contentType:"application/json; charset=utf-8",success:function(){setTimeout(function(){f.removeAttr("disabled").text(g)},500)}});return false})});AJS.$(document).ready(function(){require("plugin/jenkins/pr-triggerbutton")});;
;
/* module-key = 'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form', location = '/static/jenkins.js' */
define("plugin/jenkins/test",["jquery","aui","bitbucket/internal/util/ajax","bitbucket/util/navbuilder","bitbucket/internal/model/page-state","bitbucket/internal/util/error","exports"],function(d,g,e,h,f,b,c){function a(j){return g.contextPath()+"/rest/jenkins/latest/projects/"+f.getProject().getKey()+"/repos/"+f.getRepository().getSlug()+"/"+j}function i(){var j=d("#testButton"),l=d("#jenkinsBase"),t=d("#gitRepoUrl"),r=d("#cloneType"),n=d("#ignoreCerts"),q=d("#omitHashCode"),m=d("#omitBranchName"),u,s;function k(v,w){if(u==null){u=d("<span style='margin-left: 10px;'></span>").insertAfter(j)}u.text(v);u.css("color",w)}function p(v){if(v){j.removeProp("disabled").removeClass("disabled")}else{j.prop("disabled","disabled").addClass("disabled")}}function o(v){if(v=="ssh"){t.val(s.ssh);t.prop("disabled","disabled").addClass("disabled")}else{if(v=="http"){t.val(s.http);t.prop("disabled","disabled").addClass("disabled")}else{t.removeProp("disabled").removeClass("disabled")}}}r.change(function(){o(d(this).val())});e.rest({url:a("config")}).success(function(v){s=v;if(t.val()!=""){var w=t.val();if(w==s.ssh){r.find("option[value='ssh']").attr("selected","selected")}else{if(w==s.http){r.find("option[value='http']").attr("selected","selected")}else{r.find("option[value='custom']").attr("selected","selected")}}r.trigger("change")}else{o(r.val())}});j.click(function(){k("Trying...","green");p(false);e.rest({url:a("test"),type:"POST",data:{jenkinsBase:[l.val()],cloneType:[r.val()],gitRepoUrl:[t.val()],ignoreCerts:[n.attr("checked")?"TRUE":"FALSE"],omitHashCode:[q.attr("checked")?"TRUE":"FALSE"],omitBranchName:[m.attr("checked")?"TRUE":"FALSE"]}}).always(function(){p(true)}).success(function(v){if(v.successful){k("Success!","green")}else{k("Error: "+v.message,"red")}})})}c.onReady=function(){i()}});;
;
/* module-key = 'com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook-config-form', location = '/static/jenkins.soy' */
// This file was automatically generated from jenkins.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace com.nerdwin15.stash.webhook.
 */

if (typeof com == 'undefined') { var com = {}; }
if (typeof com.nerdwin15 == 'undefined') { com.nerdwin15 = {}; }
if (typeof com.nerdwin15.stash == 'undefined') { com.nerdwin15.stash = {}; }
if (typeof com.nerdwin15.stash.webhook == 'undefined') { com.nerdwin15.stash.webhook = {}; }


com.nerdwin15.stash.webhook.formContents = function(opt_data, opt_ignored) {
  return aui.form.textField({id: 'jenkinsBase', isRequired: true, value: opt_data.config['jenkinsBase'], labelContent: '' + soy.$$escapeHtml('Jenkins URL'), descriptionText: 'URL to the Jenkins instance. Example: https://jenkins.example.com', extraClasses: 'long', errorTexts: opt_data.errors ? opt_data.errors['jenkinsBase'] : null}) + '<div class="field-group"><label for="gitRepoUrl">' + soy.$$escapeHtml('Repo Clone URL') + '</label><select class="select" id="cloneType" name="cloneType" style="max-width: 90px"><option value="http" ' + soy.$$escapeHtml(opt_data.config['cloneType'] == 'http' ? 'selected="selected"' : '') + '>HTTP</option><option value="ssh" ' + soy.$$escapeHtml(opt_data.config['cloneType'] == 'ssh' ? 'selected="selected"' : '') + '>SSH</option><option value="custom" ' + soy.$$escapeHtml(opt_data.config['cloneType'] != 'http' && opt_data.config['cloneType'] != 'ssh' ? 'selected="selected"' : '') + '>Custom</option></select>&nbsp;<input id="gitRepoUrl" style="max-width: 400px" class="text" type="text" name="gitRepoUrl" value="' + soy.$$escapeHtml(opt_data.config['gitRepoUrl'] != null ? opt_data.config['gitRepoUrl'] : '') + '"><div class="description">' + soy.$$escapeHtml('The URL Jenkins is using to clone this repository. Feel free to adjust as needed.') + '</div></div>' + widget.aui.form.checkbox({id: 'ignoreCerts', checked: opt_data.config['ignoreCerts'], labelContent: '' + soy.$$escapeHtml('Skip SSL Certificate Validation'), labelHtml: '' + soy.$$escapeHtml('Skip SSL Certificate Validation'), description: 'When connecting to Jenkins, allow all certificates to be accepted, including self-signed certs'}) + widget.aui.form.checkbox({id: 'omitHashCode', checked: opt_data.config['omitHashCode'], labelContent: '' + soy.$$escapeHtml('Omit SHA1 Hash Code'), labelHtml: '' + soy.$$escapeHtml('Omit SHA1 Hash Code'), description: 'Do not send the commit\x27s SHA1 hash code to Jenkins'}) + widget.aui.form.checkbox({id: 'omitBranchName', checked: opt_data.config['omitBranchName'], labelContent: '' + soy.$$escapeHtml('Omit Branch Name'), labelHtml: '' + soy.$$escapeHtml('Omit Branch Name'), description: 'Do not send the commit\x27s branch name to Jenkins'}) + widget.aui.form.checkbox({id: 'omitTriggerBuildButton', checked: opt_data.config['omitTriggerBuildButton'], labelContent: '' + soy.$$escapeHtml('Omit the Trigger Build Button'), labelHtml: '' + soy.$$escapeHtml('Omit the Trigger Build Button'), description: 'Do not display the Trigger Build Button on the pull request overview page'}) + widget.aui.form.field({id: 'test-form', labelContent: 'Configuration check', labelHtml: 'Configuration check', description: 'Test the configured connection with Jenkins.', input: '' + widget.aui.form.button({id: 'testButton', label: 'Trigger Jenkins', tooltip: 'Manually trigger Jenkins builds.'})}) + '<hr /><h3>' + soy.$$escapeHtml('Advanced Configuration') + '</h3>' + aui.form.textField({id: 'ignoreCommitters', value: opt_data.config['ignoreCommitters'], labelContent: '' + soy.$$escapeHtml('Committers to Ignore'), descriptionText: 'Stash usernames of committer(s) whose pushes/merges should NOT trigger a Jenkins notification. Space delimited', extraClasses: 'long', errorTexts: opt_data.errors ? opt_data.errors['ignoreCommitters'] : null}) + '<div class="field-group"><label for="branchOptions">' + soy.$$escapeHtml('Branch Options') + '</label><select class="select" id="branchOptions" name="branchOptions" style="max-width: 110px"><option value="" ' + soy.$$escapeHtml(opt_data.config['branchOptions'] == null ? 'selected="selected"' : '') + '>Build all</option><option value="whitelist" ' + soy.$$escapeHtml(opt_data.config['branchOptions'] == 'whitelist' ? 'selected="selected"' : '') + '>Build from:</option><option value="blacklist" ' + soy.$$escapeHtml(opt_data.config['branchOptions'] == 'blacklist' ? 'selected="selected"' : '') + '>Ignore from:</option></select>&nbsp;<input id="branchOptionsBranches" style="max-width: 400px" class="text" type="text" name="branchOptionsBranches" value="' + soy.$$escapeHtml(opt_data.config['branchOptionsBranches'] != null ? opt_data.config['branchOptionsBranches'] : '') + '"><div class="description">' + soy.$$escapeHtml('Build from only certain branches or ignore certain branches. Space-delimited. Case-insensitive. Wildcard usage of * accepted only at end of name.') + '</div>' + soy.$$filterNoAutoescape(opt_data.errors ? '<div class="error">' + opt_data.errors['branchOptionsBranches'] + '</div>' : '') + '</div><script>require(\'plugin/jenkins/test\').onReady();<\/script>';
};
if (goog.DEBUG) {
  com.nerdwin15.stash.webhook.formContents.soyTemplateName = 'com.nerdwin15.stash.webhook.formContents';
}
;